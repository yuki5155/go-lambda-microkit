// Code generated by MockGen. DO NOT EDIT.
// Source: myaws/cognito.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	cognitoidentityprovider "github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider"
	gomock "github.com/golang/mock/gomock"
)

// MockCognitoAPI is a mock of CognitoAPI interface.
type MockCognitoAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCognitoAPIMockRecorder
}

// MockCognitoAPIMockRecorder is the mock recorder for MockCognitoAPI.
type MockCognitoAPIMockRecorder struct {
	mock *MockCognitoAPI
}

// NewMockCognitoAPI creates a new mock instance.
func NewMockCognitoAPI(ctrl *gomock.Controller) *MockCognitoAPI {
	mock := &MockCognitoAPI{ctrl: ctrl}
	mock.recorder = &MockCognitoAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCognitoAPI) EXPECT() *MockCognitoAPIMockRecorder {
	return m.recorder
}

// ConfirmSignUp mocks base method.
func (m *MockCognitoAPI) ConfirmSignUp(ctx context.Context, params *cognitoidentityprovider.ConfirmSignUpInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.ConfirmSignUpOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConfirmSignUp", varargs...)
	ret0, _ := ret[0].(*cognitoidentityprovider.ConfirmSignUpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmSignUp indicates an expected call of ConfirmSignUp.
func (mr *MockCognitoAPIMockRecorder) ConfirmSignUp(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmSignUp", reflect.TypeOf((*MockCognitoAPI)(nil).ConfirmSignUp), varargs...)
}

// GlobalSignOut mocks base method.
func (m *MockCognitoAPI) GlobalSignOut(ctx context.Context, params *cognitoidentityprovider.GlobalSignOutInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.GlobalSignOutOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GlobalSignOut", varargs...)
	ret0, _ := ret[0].(*cognitoidentityprovider.GlobalSignOutOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GlobalSignOut indicates an expected call of GlobalSignOut.
func (mr *MockCognitoAPIMockRecorder) GlobalSignOut(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GlobalSignOut", reflect.TypeOf((*MockCognitoAPI)(nil).GlobalSignOut), varargs...)
}

// InitiateAuth mocks base method.
func (m *MockCognitoAPI) InitiateAuth(ctx context.Context, params *cognitoidentityprovider.InitiateAuthInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.InitiateAuthOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InitiateAuth", varargs...)
	ret0, _ := ret[0].(*cognitoidentityprovider.InitiateAuthOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitiateAuth indicates an expected call of InitiateAuth.
func (mr *MockCognitoAPIMockRecorder) InitiateAuth(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitiateAuth", reflect.TypeOf((*MockCognitoAPI)(nil).InitiateAuth), varargs...)
}

// SignUp mocks base method.
func (m *MockCognitoAPI) SignUp(ctx context.Context, params *cognitoidentityprovider.SignUpInput, optFns ...func(*cognitoidentityprovider.Options)) (*cognitoidentityprovider.SignUpOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignUp", varargs...)
	ret0, _ := ret[0].(*cognitoidentityprovider.SignUpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockCognitoAPIMockRecorder) SignUp(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockCognitoAPI)(nil).SignUp), varargs...)
}

// MockCognitoClientInterface is a mock of CognitoClientInterface interface.
type MockCognitoClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCognitoClientInterfaceMockRecorder
}

// MockCognitoClientInterfaceMockRecorder is the mock recorder for MockCognitoClientInterface.
type MockCognitoClientInterfaceMockRecorder struct {
	mock *MockCognitoClientInterface
}

// NewMockCognitoClientInterface creates a new mock instance.
func NewMockCognitoClientInterface(ctrl *gomock.Controller) *MockCognitoClientInterface {
	mock := &MockCognitoClientInterface{ctrl: ctrl}
	mock.recorder = &MockCognitoClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCognitoClientInterface) EXPECT() *MockCognitoClientInterfaceMockRecorder {
	return m.recorder
}

// ConfirmSignUp mocks base method.
func (m *MockCognitoClientInterface) ConfirmSignUp(ctx context.Context, username, confirmationCode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmSignUp", ctx, username, confirmationCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfirmSignUp indicates an expected call of ConfirmSignUp.
func (mr *MockCognitoClientInterfaceMockRecorder) ConfirmSignUp(ctx, username, confirmationCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmSignUp", reflect.TypeOf((*MockCognitoClientInterface)(nil).ConfirmSignUp), ctx, username, confirmationCode)
}

// Login mocks base method.
func (m *MockCognitoClientInterface) Login(ctx context.Context, username, password string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login.
func (mr *MockCognitoClientInterfaceMockRecorder) Login(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockCognitoClientInterface)(nil).Login), ctx, username, password)
}

// Logout mocks base method.
func (m *MockCognitoClientInterface) Logout(ctx context.Context, accessToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, accessToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockCognitoClientInterfaceMockRecorder) Logout(ctx, accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockCognitoClientInterface)(nil).Logout), ctx, accessToken)
}

// SignUp mocks base method.
func (m *MockCognitoClientInterface) SignUp(ctx context.Context, username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockCognitoClientInterfaceMockRecorder) SignUp(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockCognitoClientInterface)(nil).SignUp), ctx, username, password)
}
